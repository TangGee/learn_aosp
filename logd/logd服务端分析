1 启动脚本
service logd /system/bin/logd
    socket logd stream 0666 logd logd
	socket logdr seqpacket 0666 logd logd
	socket logdw dgram 0222 logd logd
	group root system readproc
	writepid /dev/cpuset/system-background/tasks

service logd-reinit /system/bin/logd --reinit
	oneshot
	disabled
	writepid /dev/cpuset/system-background/tasks


首先log服务开机启动  logd-reinit不会开机启动 我们这里不进行分析
看一下log的进程启动时候都做了什么
 1 创建了三个unix 域套接字 logd （stream 可靠链接）      logdr(seqpacket 可靠链接 拥有消息间隔（每次只能读一个packet）)    logw(dgram 数据报)


2 启动
  首先初始化三个信号量 reinit(0） uidName（0）   sem_name 默认为1
　启动线程用于处理--reinit请求
　drop_privs
  初始化LogBuffer
  创建LogReader
  打开logdr监听（启动线程开始监听LogReader.runListener() 最关键一部 用于把log发送给读取的进程）
  打开LogListener 用于读取写进来的log（logdw）
  打开CommandListener 用于接收命令 (logd)
  LogAudit 监听NETLINK_AUDIT 读取selinux的log
  LogKlog 读取klog
  readDmesg 
  调用pause挂起线程 下面我们各个击破 
分为几个层面  
1 各个listener逻辑
2 权限管理
3 进程调度 线程管理
4 信号处理

一 LogReader
这里需要注意的是LogReader属于SocketListener的子类
  startListener 之后创建一个ctrlpipe,之后启动线程执行threadStart,战场转入线程执行LogReader.runListener


  





LogBuffer中三种重要的结构
　1 mLogElements
  2 monotonic
  3 mTimes
　4 LogStatistics stats;
  5 PruneList mPrune;





1capset
2进程调度


